{"version":3,"sources":["Xhr.ts","andy.ts"],"names":[],"mappings":"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","file":"andy.js","sourceRoot":"..\\src","sourcesContent":["\nexport const xhr = (\n  url: string,\n  method: 'GET' | 'POST' = 'GET',\n  mimeType?: string,\n  body?: any): Promise<Response> => {\n\n    const headers = new Headers();\n    headers.append('User-Agent', 'Mesh/1.0');\n    if (mimeType) {\n      headers.append('Accept', mimeType);\n      headers.append('Content-Type', mimeType);\n    }\n    const request = new Request(url, {\n      method: method,\n      cache: 'reload',\n      mode: 'cors',\n      credentials: 'same-origin',\n      headers: headers,\n      body: body    // JSON.stringify text...\n    });\n\n    return fetch(request);\n};\n","import { xhr } from './Xhr';\r\n\r\ndeclare var window: any;\r\n\r\n/////////////////////////////////////////////////\r\n\r\nexport class Sound {\r\n  public buffer: AudioBuffer;\r\n\r\n  public loop: boolean;\r\n  public isInContext = false;\r\n  public isPlaying = false;\r\n  public isMusic = false;\r\n\r\n  constructor(buffer: AudioBuffer) {\r\n    this.buffer = buffer;\r\n  }\r\n\r\n  private source: AudioBufferSourceNode;\r\n  private volume: GainNode;\r\n  private panner: PannerNode;\r\n\r\n  setContext(context: AudioContext) {\r\n    this.volume = context.createGain();\r\n    this.panner = context.createPanner();\r\n    this.source = context.createBufferSource();\r\n\r\n    this.source.connect(this.volume);\r\n    this.volume.connect(this.panner);\r\n\r\n    this.source.buffer = this.buffer;\r\n    this.source.loop = this.loop;\r\n    this.isInContext = true;\r\n\r\n    this.panner.panningModel = 'HRTF';\r\n    this.panner.distanceModel = 'inverse';\r\n    this.panner.refDistance = 1;\r\n    this.panner.maxDistance = 1000;\r\n    this.panner.rolloffFactor = 1;\r\n    this.panner.coneInnerAngle = 360;\r\n    this.panner.coneOuterAngle = 0;\r\n    this.panner.coneOuterGain = 0;\r\n  }\r\n\r\n  get node(): AudioNode {\r\n    return (this.isMusic) ? this.volume : this.panner;\r\n  }\r\n\r\n  play(time: number = 0) {\r\n    if (!this.isInContext) {\r\n      Log.error('Sound not in context');\r\n    }\r\n    this.source.start(time);\r\n  }\r\n\r\n  stop() {\r\n    this.source.stop();\r\n  }\r\n}\r\n\r\n/////////////////////////////////////////////////\r\n\r\nexport class SoundSystemOptions {}\r\n\r\n/////////////////////////////////////////////////\r\nexport class SoundSystem {\r\n  static addSoundToContext(context: AudioContext, sound: Sound) {\r\n    sound.setContext(context);\r\n  }\r\n  static soundContext: AudioContext;\r\n  static masterGainNode: GainNode;\r\n\r\n  constructor(settings: SoundSystemOptions) {\r\n    this.reboot();\r\n  }\r\n\r\n  reboot() {\r\n    try {\r\n      const AudioContext = window.webkitAudioContext // Safari and old versions of Chrome\r\n          || window.AudioContext                     // Default\r\n          || false;\r\n\r\n      if (AudioContext) {\r\n        if (SoundSystem.soundContext) {\r\n          SoundSystem.soundContext.suspend();\r\n        }\r\n        SoundSystem.soundContext = new AudioContext();\r\n        SoundSystem.soundContext.onstatechange = this.handleStateChange;\r\n\r\n        SoundSystem.masterGainNode = SoundSystem.soundContext.createGain();\r\n        SoundSystem.masterGainNode.connect(SoundSystem.soundContext.destination);\r\n\r\n        window.addEventListener('focus', (event: any) => {\r\n          console.log('Resume Play');\r\n          this.resumePlay();\r\n        });\r\n      } else {\r\n        console.error('Web Audio API is not supported in this browser');\r\n      }\r\n    } catch (e) {\r\n      console.error('Error creating Web Audio context', e);\r\n    }\r\n  }\r\n\r\n  public adjustVolume(by: number) {\r\n      SoundSystem.masterGainNode.gain.value = by;\r\n  }\r\n\r\n  public play(sound: Sound, loop: boolean = false, time: number = 0) {\r\n      sound.loop = loop;\r\n      this.playSound(sound, time);\r\n  }\r\n\r\n  public decodeSound(data: ArrayBuffer): Promise<AudioBuffer> {\r\n    return new Promise<AudioBuffer>((res, rej) => {\r\n      let buffer: AudioBuffer = undefined;\r\n      if (SoundSystem.soundContext) {\r\n        SoundSystem.soundContext.decodeAudioData(data, (ab: AudioBuffer) => {\r\n            buffer = ab;\r\n            res(buffer);\r\n          },\r\n          (error: any) => {\r\n            console.error(error);\r\n            rej(error);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  public resumePlay(): Promise<void> {\r\n    return SoundSystem.soundContext.resume();\r\n  }\r\n\r\n  private playSound(sound: Sound, time: number = 0) {\r\n    sound.setContext(SoundSystem.soundContext);\r\n    sound.node.connect(SoundSystem.masterGainNode);\r\n    sound.play(time);\r\n  }\r\n\r\n  private handleStateChange(e: Event): any {\r\n    if (SoundSystem.soundContext && SoundSystem.soundContext.state !== 'running') {\r\n      this.resumePlay();\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Load a sound from the server and store it in the sound\r\n * registry\r\n * @param name\r\n */\r\nexport const loadSound = (url: string, soundSystem: SoundSystem): Promise<Sound> => {\r\n  return new Promise((resolve, reject) => {\r\n    xhr(url, 'GET')\r\n      .then(response => response.arrayBuffer())\r\n      .then(response => {\r\n        soundSystem.decodeSound(<ArrayBuffer>response).then(\r\n          (b: AudioBuffer) => {\r\n            const sound = new Sound(b);\r\n            sound.buffer = b;\r\n            resolve(sound);\r\n          },\r\n          (err) => {\r\n            reject(err);\r\n          }).catch(e => console.error(e));\r\n      }).catch(e => console.error(e));\r\n  });\r\n};\r\n"]}